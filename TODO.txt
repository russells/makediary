-*- outline -*-


* Images.
EpsImagePlugin takes the number of pixels in the image, and makes that the
bounding box size in the current user space units.  So a 40x50 pixel image
will have a "%BoundingBox: 0 0 40 50" DSC comment.  I will need to parse
that DSC comment, and use scale to ensure that the pic ends up the correct
size.

Images in EPS format get printed at 0,0.  Use translate to put them in the
correct place.


* Figure out the data structures for DotCalendar.  MOSTLY DONE
This will probably be a dictionary of dates.  Each dictionary will be
another data structure containing a list of events that happen on that day.


* DotCalendar extensions to pcal format
Anything that needs to be extended (the thing I am thinking about is the
search path for image files), could be done with special formatted
comments.  A comment that matches '^#<<(?P<name>[^:]+):(?P<value>.*)>>
could be used to set a name:value configuration pair.


* Data structures
Sort out the data structures for each day and event.  Currently there is a
level of indirection missing in the list of events on a particular day.


* Holidays
Sort out whether the information about whether a day is a holiday or not is
an attribute of the day, or an attribute of an event that occurs on that
day.


* %-substitution.  MOSTLY DONE

This will be a lot of work.

It is going to have to be done after the event is copied for each year,
because some of the substitutions will be different in different years

Mostly done.  Still need to sort out %[uUwW] and %[-+]N?[DWMY].


* Invent my own config file format.
Like the world needs another one... :)

There are actually two things here

** Diary layout config
A way to specify the layout of the diary that you want -- things like what
pages it has and what order they go in.

** Event config
A more structured way to specify events, and to mark them as personal etc.
I'll probably use nosql for this, as I really want a lightweight database
to hold that info.


* Generalise the PostScript stuff.
Some of this needs to be in a general PostScript drawing library.  Some
other stuff (like day layouts) would be better also in a library, so then
the application becomes a wrapper for that stuff, driven by the config
file.


* Fix the problem with image printing and restore.

gs (or gv?) barfs on some of my image printing stuff, if I run the output
file through pstops to print on a different size paper.  (Something to do
with eps and image bounding boxes or something?  You can probably tell that
I'm guessing.)


* Work out how to install a man page using distutils.

There may be a similar thing to 'scripts=["jj"]' in setup.py.


* Fix the bdist_rpm distutils target.

It currently barfs on the man page, trying to find .../makediary.1, but
there is a .../makediary.1.gz file there.  This needs to be tested on a
redhat box (I'm doing this with debian).  It may actually work on a distro
that really does use rpm.


* Put examples in the man page.

Plain examples with use of the options.

An example using "halfletter" paper size, then arranging the pages into a
book with pstops.  DONE.


* Fix EPS.

There is a problem with embedded images that confuses some processors.
GhostGum gsview on windows thinks that the %%Page marker for the image is
an incorrect %%Page marker for the document, and psselect thinks that the
end of the image is the end of the surrounding page.  Fix up the EPS
generation so that this does not happen.


* GUI frontend for this thing.

Perhaps a wxPython app that lets the user set the parameters of the diary,
and then runs makediary and sends the output somewhere?

This is a bit bigger than some of the other todo items in here... :)

An idea: make a wxPython (or wxgtk) app, perhaps a tab panel.  Allow the user
to select lots of diary parameters in the tabs, and have a "go" button at the
bottom.  At go, we generate the diary and run gv on the output.


* Address database.

Look at using the output format from eg evolution, so we don't have to invent
yet another file format.


* Forward planner page (year to page, month to box).


* Linux admin commands page.  :)


* Measurements and conversions page.


* Map of world with timezones page.

I would prefer a vector map that is converted to PostScript at runtime.


* Layout description file.

This is a big task.

At runtime, specify a file that contains a description of the diary layout that
we wish to generate.  It should contain short (one line) descriptions of the
page groups.


* Add options to position the page on the paper.

This will make it easier to print small pages on larger paper, by allowing the
position of the pages to be specified in advance, and not having to move them
around later with pstops.


* Output PDF

Probably requires a re-structure to abstract out the presentation stuff,
then add PDF as another type of presentation.


* Make makediary run as a web service.

Suggested by Ben.  Run it as a CGI, perhaps, and have its output be a PDF file
that can be viewed and printed directly by the user.


* Print dates of the solstices and equinoxes.

Dates: http://aa.usno.navy.mil/data/docs/EarthSeasons.php

Make a solstice.py module with these dates, perhaps?

Print the solstice and equinox information in the same place as the moon phase
information.


* Allow printing EPS files across two pages.

This will allow things like full page maps.  I should be able to print the
whole EPS file one each page, scaled and clipped so it appears as a single map
that spans the pages.


* Allow more specific EPS inclusion.

Perhaps --eps-file=file.eps,x=X,y=Y,scale=n%,rotate=right


* Allow pdf page inclusion.

With similar parameters as specified for EPS inclusion above.

