-*- outline -*-

* Margins  DONE

There are some strangeties in the calculation of margins.

** top margin
di.tmargin is not used to calculate di.titley, PostscriptPage.ptop etc.


* page size  DONE
In general, the size of the page should be used to control everything else
about the page layout.  This is a big change.  Most of the calculations
will be done in DiaryInfo.__init__().  Then we should be able to allow the
user to specify any arbitrary page size.

When the page size changes, we will have to be careful with certain other
things, like the line spacing, that need to stay (roughly) the same size
regardless of the page size.  This may also apply to page titles.


* Calendars  DONE
The size of a calendar should be more easily controllable.  Perhaps make it
always one unit square, and then expect the user to scale to approximately
1.33x1.0.  This will require some very careful mucking around with font
sizes etc.


* Calendar page  DONE
The calendar page is particularly badly behaved.  It ignores a lot of the
page size and margin information.


* Personal Info page  DONE
This page needs more care in working out the line spacing.  If the margins
are such that there isn't enough room for at least the required number of
lines, then the line spacing should be reduced.


* Rearrange output  DONE
At the moment, each page is collected as an entire string, and then sent to
the file.  This means lots of string concatenation, which seems to be
fairly expensive in python.  In addition, I intend to start using the
EpsImagePlugin of the python imaging library, which requires a file to send
its output.  So perhaps things would be much better off if the
PostscriptPage class knew about a current output file, and sent its output
there.

Mmm, perhaps string concatenation is not all that expensive after all.  To
avoid a wholesale code reorganisation I can use StringIO to collect the
output of EpsImagePlugin._save(), before adding it to the returned string.
Everybody is a bit happier.


* Images.
EpsImagePlugin takes the number of pixels in the image, and makes that the
bounding box size in the current user space units.  So a 40x50 pixel image
will have a "%BoundingBox: 0 0 40 50" DSC comment.  I will need to parse
that DSC comment, and use scale to ensure that the pic ends up the correct
size.

Images in EPS format get printed at 0,0.  Use translate to put them in the
correct place.


* Make DiaryInfo a parameter to all the classes.  DONE
At the moment all the page classes refer to a global var called "di" to get
all their page and diary configuration information.  This should be a
parameter to the __init__ method of all those classes.

Do this by renaming the "di" variable, then letting the compiler find all
the places where it is referenced.

This might be a good time to learn about python's variable and object
semantics.  Will this parameter be passed by reference or value?  It needs
to be passed by reference for this to work.  (It does get passed by
reference.)


* In DotCalendar, add the picture spec  DONE
This is an extension to the pcal .calendar file.  If the spec line ends in
'<<([^<]+)>>\s*$', then take the name inside '<<>>' to be the filename of
an image to print next to the event on that day.

This has been generalised, so that these substrings are of the form
<<key:value>>.  The key is used to set an attribute in the dictionary for
that event, with the value as the value stored in that dictionary entry.

I'm having second thoughts about this, because it means that the .calendar
file no longer makes sense when printed by pcal(1).  Now I'm thinking that
perhaps special formatted comments should be used instead.  (Now changed so
that the strings are of the form #<<key:value>>, and pcal sees it as a
comment.)


* Figure out the data structures for DotCalendar.  MOSTLY DONE
This will probably be a dictionary of dates.  Each dictionary will be
another data structure containing a list of events that happen on that day.


* DotCalendar extensions to pcal format
Anything that needs to be extended (the thing I am thinking about is the
search path for image files), could be done with special formatted
comments.  A comment that matches '^#<<(?P<name>[^:]+):(?P<value>.*)>>
could be used to set a name:value configuration pair.


* Data structures
Sort out the data structures for each day and event.  Currently there is a
level of indirection missing in the list of events on a particular day.


* Holidays
Sort out whether the information about whether a day is a holiday or not is
an attribute of the day, or an attribute of an event that occurs on that
day.


* pcal(1) bug?
After an entry that specifies a year, following entries that do not specify
a year (and are therefore meant to apply to all years), will only match the
previously specified year.

Figure out whether this is a bug, or is documented somewhere in the pcal
man page.


* %-substitution.  MOSTLY DONE

This will be a lot of work.

It is going to have to be done after the event is copied for each year,
because some of the substitutions will be different in different years

How do I do a deep copy of a dictionary?  DONE.

Mostly done.  Still need to sort out %[uUwW] and %[-+]N?[DWMY].


* Image size.  DONE
Write the code to print images bounded by a box, with the correct aspect
ratio.  They should remain centred in the box.


* Event warnings.  DONE
Add a #<<warn:2 weeks>> type flag.  Events have that key will be printed
again in gray, that long before the real event.  So it will also need a
'grey' key in the event dictionary to indicate this.


* Memoise most of the page drawing.  DONE
This is a long term plan.

The page drawing objects do all of their drawing "by hand".  The PostScript
code for each page is an almost identical copy of each similar page.  To
reduct the size of the output code, we could give each page type a method
that outputs drawing code for its page type.  This drawing code would go in
the document prolog(ue), and then be available for that page type to draw
itself when required.  For example:

  # In the prolog generation
  self.w( AddressPage(self.di).drawingCode() )

  # Where the page is required
  self.w( AddressPage(self.di).page() )

  # In the page code
  s = s + "%d pageTranslate drawAddressPage SP\n" % self.di.pageNum

Or something like that.  The idea is to reduce the size of the output, and
to also reduce the runtime of the makediary program (not the runtime of the
PostScript output).  A lot of recalculation is done for every page, and it
should probably be done only once by each page class, as it will not change
between pages in the same run.


* Invent my own config file format.
Like the world needs another one... :)

There are actually two things here

** Diary layout config
A way to specify the layout of the diary that you want -- things like what
pages it has and what order they go in.

** Event config
A more structured way to specify events, and to mark them as personal etc.
I'll probably use nosql for this, as I really want a lightweight database
to hold that info.


* Generalise the PostScript stuff.
Some of this needs to be in a general PostScript drawing library.  Some
other stuff (like day layouts) would be better also in a library, so then
the application becomes a wrapper for that stuff, driven by the config
file.


* Fix the problem with image printing and restore.

gs (or gv?) barfs on some of my image printing stuff, if I run the output
file through pstops to print on a different size paper.  (Something to do
with eps and image bounding boxes or something?  You can probably tell that
I'm guessing.)


* Use StringIO.

The program does lots (and lots) of string contatenation.  I should
probably use StringIO to speed that up.  Do some tests to see if that
really does speed things up.


* Distinguish between paper size and page size.  DONE.

For example, let the program print on A4 paper, but make marks for A6 sized
paper.  This will interact with the page registration marks thing, for
cutting to size after printing.

I could probably do this by doing a translation at the start of each page,
in the same place that I make the drawing units millimetres by doing a
scale.

Another benefit of this is that the registration marks that are below and
to the left of the page would magically reappear.


* Make a paper size dictionary.  MOSTLY DONE.

This would contain a list of tuples (width,height), indexed by paper size
name.  Then when setting paper sizes and page sizes, I would have an easy
way to calculate where to put the page on the paper.


* Fix the debug-boxes and page translation bug.  DONE.

When using a page size that is smaller than the paper size, the
--debug-boxes flag makes the print fail on some printers: hanson (a
HP5500M?) and gv on windows.  This happens in debugboxLBRT.  currentmatrix
returns a matrix where either element 0 or element 3 (or both) is 0.0, and
we get a divide by 0 error.  I'll have to work out exactly what this code
is doing, and if it is really necessary.


* Work out how to put a shell script wrapper in a python package.  DONE.

The distutils stuff seems geared to just make packages that have python
source code and go in the python site-packages directory.  I would like to
put a shell script or a symlink in /usr/bin or /usr/local/bin.


* Work out how to install a man page using distutils.

There may be a similar thing to 'scripts=["jj"]' in setup.py.


* Fix the bdist_rpm distutils target.

It currently barfs on the man page, trying to find .../makediary.1, but
there is a .../makediary.1.gz file there.  This needs to be tested on a
redhat box (I'm doing this with debian).  It may actually work on a distro
that really does use rpm.


* Make a debian package.  DONE.

There doesn't appear to be a bdist_deb distutils target.  Bummer.


* Add "halfletter" page size.  DONE.

This could be useful for people wanting to print two pages on letter sized
paper.  (This is not necessary for A or B series sizes, as each of those is
exactly half the size of the previous size in the same series.)


* Put examples in the man page.

Plain examples with use of the options.

An example using "halfletter" paper size, then arranging the pages into a
book with pstops.  DONE.


* Print reasonable version numbers.  DONE.

Make ``makediary --version'' print the version number (not the svn
dollar-Id-dollar string.)


* Fix EPS.

There is a problem with embedded images that confuses some processors.
GhostGum gsview on windows thinks that the %%Page marker for the image is
an incorrect %%Page marker for the document, and psselect thinks that the
end of the image is the end of the surrounding page.  Fix up the EPS
generation so that this does not happen.


* GUI frontend for this thing.

Perhaps a wxPython app that lets the user set the parameters of the diary,
and then runs makediary and sends the output somewhere?

This is a bit bigger than some of the other todo items in here... :)


* Remove the duplicate list of month names.

In v 1.2, there is a month name list at line 1041, and another at line
1208.


* Darker outlines for weekend days in planner.  DONE.


* Address database.

Look at using the output format from eg evolution, so we don't have to invent
yet another file format.


* Forward planner page (year to page, month to box).


* Linux admin commands page.  :)


* Measurements and conversions page.


* Map of world with timezones page.

I would prefer a vector map that is converted to PostScript at runtime.


* Layout description file.

This is a big task.

At runtime, specify a file that contains a description of the diary layout that
we wish to generate.  It should contain short (one line) descriptions of the
page groups.


* Allow starting the year on an arbitrary day.  DONE.

